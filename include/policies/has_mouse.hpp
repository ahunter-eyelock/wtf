#pragma once

namespace wtf {

  enum class event_vkeys{
    control = MK_CONTROL,
    left = MK_LBUTTON,
    middle = MK_MBUTTON,
    right = MK_RBUTTON,
    shift = MK_SHIFT,
    xbutton1 = MK_XBUTTON1,
    xbutton2 = MK_XBUTTON2,
  };

  namespace policy {
    /** has_mouse
    * produces events generated by mouse actions
    */
    template<typename _SuperT>
    struct has_mouse : _SuperT {

      ~has_mouse() = default;
      has_mouse() = default;
      has_mouse(const has_mouse&) = delete;
      has_mouse &operator=(const has_mouse &) = delete;
      has_mouse(has_mouse&&) = delete;
      has_mouse &operator=(has_mouse &&) = delete;


    protected:

      virtual void MouseMoveEvent(event_vkeys, const point::client_coords&){}
      virtual void MouseLButtonDownEvent(event_vkeys, const point::client_coords&){}
      virtual void MouseLButtonUpEvent(event_vkeys, const point::client_coords&){}
      virtual void MouseWheelEvent(event_vkeys, int16_t /*delta*/, const point::screen_coords&){}

      virtual LRESULT handle_message(HWND , UINT umsg, WPARAM wparam, LPARAM lparam, bool &) override {
        if (WM_MOUSEMOVE == umsg)
          MouseMoveEvent(static_cast<event_vkeys>(wparam), point::client_coords(LOWORD(lparam), HIWORD(lparam)));
        if (WM_LBUTTONDOWN == umsg)
          MouseLButtonDownEvent(static_cast<event_vkeys>(wparam), point::client_coords(LOWORD(lparam), HIWORD(lparam)));
        if (WM_LBUTTONUP == umsg)
          MouseLButtonUpEvent(static_cast<event_vkeys>(wparam), point::client_coords(LOWORD(lparam), HIWORD(lparam)));
        if (WM_MOUSEWHEEL == umsg)
          MouseWheelEvent(static_cast<event_vkeys>(LOWORD(wparam)), static_cast<int16_t>(HIWORD(wparam)),
                          point::screen_coords(LOWORD(lparam), HIWORD(lparam)));
        return 0;
      }
    };
  }
}
